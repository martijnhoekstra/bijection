// Autogenerated code DO NOT EDIT BY HAND
// Generated by bijection-clojure/codegen/GeneratorWorkaroundJava.scala

/*
Copyright 2012 Twitter, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
 */

package com.twitter.bijection.clojure;
import clojure.lang.AFn;
import clojure.lang.IFn;
import com.twitter.bijection.AbstractBijection;
import com.twitter.bijection.Bijection;

import scala.Function0;
import scala.Function1;
import scala.Function2;
import scala.Function3;
import scala.Function4;
import scala.Function5;
import scala.Function6;
import scala.Function7;
import scala.Function8;
import scala.Function9;
import scala.Function10;
import scala.Function11;
import scala.Function12;
import scala.Function13;
import scala.Function14;
import scala.Function15;
import scala.Function16;
import scala.Function17;
import scala.Function18;
import scala.Function19;
import scala.Function20;
import scala.Function21;
import scala.Function22;

public class Workaround11770 {

  public static final <O> Bijection<Function0<O>, IFn> function0ToIFn() {
    return new AbstractBijection<Function0<O>, IFn>() {
      public final AFn apply(Function0<O> fna) {
        final Function0<O> fn = fna;
        return new AFn() {
          public final Object invoke() {
            return (Object)fn.apply();
          }
        };
      }

      public Function0<O> invert(IFn fna) {
        final IFn fn = fna;
        return new Function0<O>(){
          public final O apply() {
            return (O)fn.invoke();
          }
        };
      }
    };
  }


  public static final <O, I1> Bijection<Function1<I1, O>, IFn> function1ToIFn() {
    return new AbstractBijection<Function1<I1, O>, IFn>() {
      public final AFn apply(Function1<I1, O> fna) {
        final Function1<I1, O> fn = fna;
        return new AFn() {
          public final Object invoke(Object i1) {
            return (Object)fn.apply((I1)i1);
          }
        };
      }

      public final Function1<I1, O> invert(IFn fna) {
        final IFn fn = fna;
        return new Function1<I1, O>(){
          public final O apply(I1 i1) {
            return (O)fn.invoke(i1);
          }
        };
      }
    };
  }



  public static final <O, I1, I2> Bijection<Function2<I1, I2, O>, IFn> function2ToIFn() {
    return new AbstractBijection<Function2<I1, I2, O>, IFn>() {
      public final AFn apply(Function2<I1, I2, O> fna) {
        final Function2<I1, I2, O> fn = fna;
        return new AFn() {
          public final Object invoke(Object i1, Object i2) {
            return (Object)fn.apply((I1)i1, (I2)i2);
          }
        };
      }

      public final Function2<I1, I2, O> invert(IFn fna) {
        final IFn fn = fna;
        return new Function2<I1, I2, O>(){
          public final O apply(I1 i1, I2 i2) {
            return (O)fn.invoke(i1, i2);
          }
        };
      }
    };
  }



  public static final <O, I1, I2, I3> Bijection<Function3<I1, I2, I3, O>, IFn> function3ToIFn() {
    return new AbstractBijection<Function3<I1, I2, I3, O>, IFn>() {
      public final AFn apply(Function3<I1, I2, I3, O> fna) {
        final Function3<I1, I2, I3, O> fn = fna;
        return new AFn() {
          public final Object invoke(Object i1, Object i2, Object i3) {
            return (Object)fn.apply((I1)i1, (I2)i2, (I3)i3);
          }
        };
      }

      public final Function3<I1, I2, I3, O> invert(IFn fna) {
        final IFn fn = fna;
        return new Function3<I1, I2, I3, O>(){
          public final O apply(I1 i1, I2 i2, I3 i3) {
            return (O)fn.invoke(i1, i2, i3);
          }
        };
      }
    };
  }



  public static final <O, I1, I2, I3, I4> Bijection<Function4<I1, I2, I3, I4, O>, IFn> function4ToIFn() {
    return new AbstractBijection<Function4<I1, I2, I3, I4, O>, IFn>() {
      public final AFn apply(Function4<I1, I2, I3, I4, O> fna) {
        final Function4<I1, I2, I3, I4, O> fn = fna;
        return new AFn() {
          public final Object invoke(Object i1, Object i2, Object i3, Object i4) {
            return (Object)fn.apply((I1)i1, (I2)i2, (I3)i3, (I4)i4);
          }
        };
      }

      public final Function4<I1, I2, I3, I4, O> invert(IFn fna) {
        final IFn fn = fna;
        return new Function4<I1, I2, I3, I4, O>(){
          public final O apply(I1 i1, I2 i2, I3 i3, I4 i4) {
            return (O)fn.invoke(i1, i2, i3, i4);
          }
        };
      }
    };
  }



  public static final <O, I1, I2, I3, I4, I5> Bijection<Function5<I1, I2, I3, I4, I5, O>, IFn> function5ToIFn() {
    return new AbstractBijection<Function5<I1, I2, I3, I4, I5, O>, IFn>() {
      public final AFn apply(Function5<I1, I2, I3, I4, I5, O> fna) {
        final Function5<I1, I2, I3, I4, I5, O> fn = fna;
        return new AFn() {
          public final Object invoke(Object i1, Object i2, Object i3, Object i4, Object i5) {
            return (Object)fn.apply((I1)i1, (I2)i2, (I3)i3, (I4)i4, (I5)i5);
          }
        };
      }

      public final Function5<I1, I2, I3, I4, I5, O> invert(IFn fna) {
        final IFn fn = fna;
        return new Function5<I1, I2, I3, I4, I5, O>(){
          public final O apply(I1 i1, I2 i2, I3 i3, I4 i4, I5 i5) {
            return (O)fn.invoke(i1, i2, i3, i4, i5);
          }
        };
      }
    };
  }



  public static final <O, I1, I2, I3, I4, I5, I6> Bijection<Function6<I1, I2, I3, I4, I5, I6, O>, IFn> function6ToIFn() {
    return new AbstractBijection<Function6<I1, I2, I3, I4, I5, I6, O>, IFn>() {
      public final AFn apply(Function6<I1, I2, I3, I4, I5, I6, O> fna) {
        final Function6<I1, I2, I3, I4, I5, I6, O> fn = fna;
        return new AFn() {
          public final Object invoke(Object i1, Object i2, Object i3, Object i4, Object i5, Object i6) {
            return (Object)fn.apply((I1)i1, (I2)i2, (I3)i3, (I4)i4, (I5)i5, (I6)i6);
          }
        };
      }

      public final Function6<I1, I2, I3, I4, I5, I6, O> invert(IFn fna) {
        final IFn fn = fna;
        return new Function6<I1, I2, I3, I4, I5, I6, O>(){
          public final O apply(I1 i1, I2 i2, I3 i3, I4 i4, I5 i5, I6 i6) {
            return (O)fn.invoke(i1, i2, i3, i4, i5, i6);
          }
        };
      }
    };
  }



  public static final <O, I1, I2, I3, I4, I5, I6, I7> Bijection<Function7<I1, I2, I3, I4, I5, I6, I7, O>, IFn> function7ToIFn() {
    return new AbstractBijection<Function7<I1, I2, I3, I4, I5, I6, I7, O>, IFn>() {
      public final AFn apply(Function7<I1, I2, I3, I4, I5, I6, I7, O> fna) {
        final Function7<I1, I2, I3, I4, I5, I6, I7, O> fn = fna;
        return new AFn() {
          public final Object invoke(Object i1, Object i2, Object i3, Object i4, Object i5, Object i6, Object i7) {
            return (Object)fn.apply((I1)i1, (I2)i2, (I3)i3, (I4)i4, (I5)i5, (I6)i6, (I7)i7);
          }
        };
      }

      public final Function7<I1, I2, I3, I4, I5, I6, I7, O> invert(IFn fna) {
        final IFn fn = fna;
        return new Function7<I1, I2, I3, I4, I5, I6, I7, O>(){
          public final O apply(I1 i1, I2 i2, I3 i3, I4 i4, I5 i5, I6 i6, I7 i7) {
            return (O)fn.invoke(i1, i2, i3, i4, i5, i6, i7);
          }
        };
      }
    };
  }



  public static final <O, I1, I2, I3, I4, I5, I6, I7, I8> Bijection<Function8<I1, I2, I3, I4, I5, I6, I7, I8, O>, IFn> function8ToIFn() {
    return new AbstractBijection<Function8<I1, I2, I3, I4, I5, I6, I7, I8, O>, IFn>() {
      public final AFn apply(Function8<I1, I2, I3, I4, I5, I6, I7, I8, O> fna) {
        final Function8<I1, I2, I3, I4, I5, I6, I7, I8, O> fn = fna;
        return new AFn() {
          public final Object invoke(Object i1, Object i2, Object i3, Object i4, Object i5, Object i6, Object i7, Object i8) {
            return (Object)fn.apply((I1)i1, (I2)i2, (I3)i3, (I4)i4, (I5)i5, (I6)i6, (I7)i7, (I8)i8);
          }
        };
      }

      public final Function8<I1, I2, I3, I4, I5, I6, I7, I8, O> invert(IFn fna) {
        final IFn fn = fna;
        return new Function8<I1, I2, I3, I4, I5, I6, I7, I8, O>(){
          public final O apply(I1 i1, I2 i2, I3 i3, I4 i4, I5 i5, I6 i6, I7 i7, I8 i8) {
            return (O)fn.invoke(i1, i2, i3, i4, i5, i6, i7, i8);
          }
        };
      }
    };
  }



  public static final <O, I1, I2, I3, I4, I5, I6, I7, I8, I9> Bijection<Function9<I1, I2, I3, I4, I5, I6, I7, I8, I9, O>, IFn> function9ToIFn() {
    return new AbstractBijection<Function9<I1, I2, I3, I4, I5, I6, I7, I8, I9, O>, IFn>() {
      public final AFn apply(Function9<I1, I2, I3, I4, I5, I6, I7, I8, I9, O> fna) {
        final Function9<I1, I2, I3, I4, I5, I6, I7, I8, I9, O> fn = fna;
        return new AFn() {
          public final Object invoke(Object i1, Object i2, Object i3, Object i4, Object i5, Object i6, Object i7, Object i8, Object i9) {
            return (Object)fn.apply((I1)i1, (I2)i2, (I3)i3, (I4)i4, (I5)i5, (I6)i6, (I7)i7, (I8)i8, (I9)i9);
          }
        };
      }

      public final Function9<I1, I2, I3, I4, I5, I6, I7, I8, I9, O> invert(IFn fna) {
        final IFn fn = fna;
        return new Function9<I1, I2, I3, I4, I5, I6, I7, I8, I9, O>(){
          public final O apply(I1 i1, I2 i2, I3 i3, I4 i4, I5 i5, I6 i6, I7 i7, I8 i8, I9 i9) {
            return (O)fn.invoke(i1, i2, i3, i4, i5, i6, i7, i8, i9);
          }
        };
      }
    };
  }



  public static final <O, I1, I2, I3, I4, I5, I6, I7, I8, I9, I10> Bijection<Function10<I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, O>, IFn> function10ToIFn() {
    return new AbstractBijection<Function10<I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, O>, IFn>() {
      public final AFn apply(Function10<I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, O> fna) {
        final Function10<I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, O> fn = fna;
        return new AFn() {
          public final Object invoke(Object i1, Object i2, Object i3, Object i4, Object i5, Object i6, Object i7, Object i8, Object i9, Object i10) {
            return (Object)fn.apply((I1)i1, (I2)i2, (I3)i3, (I4)i4, (I5)i5, (I6)i6, (I7)i7, (I8)i8, (I9)i9, (I10)i10);
          }
        };
      }

      public final Function10<I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, O> invert(IFn fna) {
        final IFn fn = fna;
        return new Function10<I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, O>(){
          public final O apply(I1 i1, I2 i2, I3 i3, I4 i4, I5 i5, I6 i6, I7 i7, I8 i8, I9 i9, I10 i10) {
            return (O)fn.invoke(i1, i2, i3, i4, i5, i6, i7, i8, i9, i10);
          }
        };
      }
    };
  }



  public static final <O, I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11> Bijection<Function11<I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, O>, IFn> function11ToIFn() {
    return new AbstractBijection<Function11<I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, O>, IFn>() {
      public final AFn apply(Function11<I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, O> fna) {
        final Function11<I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, O> fn = fna;
        return new AFn() {
          public final Object invoke(Object i1, Object i2, Object i3, Object i4, Object i5, Object i6, Object i7, Object i8, Object i9, Object i10, Object i11) {
            return (Object)fn.apply((I1)i1, (I2)i2, (I3)i3, (I4)i4, (I5)i5, (I6)i6, (I7)i7, (I8)i8, (I9)i9, (I10)i10, (I11)i11);
          }
        };
      }

      public final Function11<I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, O> invert(IFn fna) {
        final IFn fn = fna;
        return new Function11<I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, O>(){
          public final O apply(I1 i1, I2 i2, I3 i3, I4 i4, I5 i5, I6 i6, I7 i7, I8 i8, I9 i9, I10 i10, I11 i11) {
            return (O)fn.invoke(i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11);
          }
        };
      }
    };
  }



  public static final <O, I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12> Bijection<Function12<I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, O>, IFn> function12ToIFn() {
    return new AbstractBijection<Function12<I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, O>, IFn>() {
      public final AFn apply(Function12<I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, O> fna) {
        final Function12<I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, O> fn = fna;
        return new AFn() {
          public final Object invoke(Object i1, Object i2, Object i3, Object i4, Object i5, Object i6, Object i7, Object i8, Object i9, Object i10, Object i11, Object i12) {
            return (Object)fn.apply((I1)i1, (I2)i2, (I3)i3, (I4)i4, (I5)i5, (I6)i6, (I7)i7, (I8)i8, (I9)i9, (I10)i10, (I11)i11, (I12)i12);
          }
        };
      }

      public final Function12<I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, O> invert(IFn fna) {
        final IFn fn = fna;
        return new Function12<I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, O>(){
          public final O apply(I1 i1, I2 i2, I3 i3, I4 i4, I5 i5, I6 i6, I7 i7, I8 i8, I9 i9, I10 i10, I11 i11, I12 i12) {
            return (O)fn.invoke(i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12);
          }
        };
      }
    };
  }



  public static final <O, I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13> Bijection<Function13<I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, O>, IFn> function13ToIFn() {
    return new AbstractBijection<Function13<I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, O>, IFn>() {
      public final AFn apply(Function13<I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, O> fna) {
        final Function13<I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, O> fn = fna;
        return new AFn() {
          public final Object invoke(Object i1, Object i2, Object i3, Object i4, Object i5, Object i6, Object i7, Object i8, Object i9, Object i10, Object i11, Object i12, Object i13) {
            return (Object)fn.apply((I1)i1, (I2)i2, (I3)i3, (I4)i4, (I5)i5, (I6)i6, (I7)i7, (I8)i8, (I9)i9, (I10)i10, (I11)i11, (I12)i12, (I13)i13);
          }
        };
      }

      public final Function13<I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, O> invert(IFn fna) {
        final IFn fn = fna;
        return new Function13<I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, O>(){
          public final O apply(I1 i1, I2 i2, I3 i3, I4 i4, I5 i5, I6 i6, I7 i7, I8 i8, I9 i9, I10 i10, I11 i11, I12 i12, I13 i13) {
            return (O)fn.invoke(i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13);
          }
        };
      }
    };
  }



  public static final <O, I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14> Bijection<Function14<I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, O>, IFn> function14ToIFn() {
    return new AbstractBijection<Function14<I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, O>, IFn>() {
      public final AFn apply(Function14<I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, O> fna) {
        final Function14<I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, O> fn = fna;
        return new AFn() {
          public final Object invoke(Object i1, Object i2, Object i3, Object i4, Object i5, Object i6, Object i7, Object i8, Object i9, Object i10, Object i11, Object i12, Object i13, Object i14) {
            return (Object)fn.apply((I1)i1, (I2)i2, (I3)i3, (I4)i4, (I5)i5, (I6)i6, (I7)i7, (I8)i8, (I9)i9, (I10)i10, (I11)i11, (I12)i12, (I13)i13, (I14)i14);
          }
        };
      }

      public final Function14<I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, O> invert(IFn fna) {
        final IFn fn = fna;
        return new Function14<I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, O>(){
          public final O apply(I1 i1, I2 i2, I3 i3, I4 i4, I5 i5, I6 i6, I7 i7, I8 i8, I9 i9, I10 i10, I11 i11, I12 i12, I13 i13, I14 i14) {
            return (O)fn.invoke(i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14);
          }
        };
      }
    };
  }



  public static final <O, I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15> Bijection<Function15<I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, O>, IFn> function15ToIFn() {
    return new AbstractBijection<Function15<I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, O>, IFn>() {
      public final AFn apply(Function15<I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, O> fna) {
        final Function15<I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, O> fn = fna;
        return new AFn() {
          public final Object invoke(Object i1, Object i2, Object i3, Object i4, Object i5, Object i6, Object i7, Object i8, Object i9, Object i10, Object i11, Object i12, Object i13, Object i14, Object i15) {
            return (Object)fn.apply((I1)i1, (I2)i2, (I3)i3, (I4)i4, (I5)i5, (I6)i6, (I7)i7, (I8)i8, (I9)i9, (I10)i10, (I11)i11, (I12)i12, (I13)i13, (I14)i14, (I15)i15);
          }
        };
      }

      public final Function15<I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, O> invert(IFn fna) {
        final IFn fn = fna;
        return new Function15<I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, O>(){
          public final O apply(I1 i1, I2 i2, I3 i3, I4 i4, I5 i5, I6 i6, I7 i7, I8 i8, I9 i9, I10 i10, I11 i11, I12 i12, I13 i13, I14 i14, I15 i15) {
            return (O)fn.invoke(i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15);
          }
        };
      }
    };
  }



  public static final <O, I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16> Bijection<Function16<I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, O>, IFn> function16ToIFn() {
    return new AbstractBijection<Function16<I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, O>, IFn>() {
      public final AFn apply(Function16<I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, O> fna) {
        final Function16<I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, O> fn = fna;
        return new AFn() {
          public final Object invoke(Object i1, Object i2, Object i3, Object i4, Object i5, Object i6, Object i7, Object i8, Object i9, Object i10, Object i11, Object i12, Object i13, Object i14, Object i15, Object i16) {
            return (Object)fn.apply((I1)i1, (I2)i2, (I3)i3, (I4)i4, (I5)i5, (I6)i6, (I7)i7, (I8)i8, (I9)i9, (I10)i10, (I11)i11, (I12)i12, (I13)i13, (I14)i14, (I15)i15, (I16)i16);
          }
        };
      }

      public final Function16<I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, O> invert(IFn fna) {
        final IFn fn = fna;
        return new Function16<I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, O>(){
          public final O apply(I1 i1, I2 i2, I3 i3, I4 i4, I5 i5, I6 i6, I7 i7, I8 i8, I9 i9, I10 i10, I11 i11, I12 i12, I13 i13, I14 i14, I15 i15, I16 i16) {
            return (O)fn.invoke(i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16);
          }
        };
      }
    };
  }



  public static final <O, I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17> Bijection<Function17<I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, O>, IFn> function17ToIFn() {
    return new AbstractBijection<Function17<I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, O>, IFn>() {
      public final AFn apply(Function17<I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, O> fna) {
        final Function17<I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, O> fn = fna;
        return new AFn() {
          public final Object invoke(Object i1, Object i2, Object i3, Object i4, Object i5, Object i6, Object i7, Object i8, Object i9, Object i10, Object i11, Object i12, Object i13, Object i14, Object i15, Object i16, Object i17) {
            return (Object)fn.apply((I1)i1, (I2)i2, (I3)i3, (I4)i4, (I5)i5, (I6)i6, (I7)i7, (I8)i8, (I9)i9, (I10)i10, (I11)i11, (I12)i12, (I13)i13, (I14)i14, (I15)i15, (I16)i16, (I17)i17);
          }
        };
      }

      public final Function17<I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, O> invert(IFn fna) {
        final IFn fn = fna;
        return new Function17<I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, O>(){
          public final O apply(I1 i1, I2 i2, I3 i3, I4 i4, I5 i5, I6 i6, I7 i7, I8 i8, I9 i9, I10 i10, I11 i11, I12 i12, I13 i13, I14 i14, I15 i15, I16 i16, I17 i17) {
            return (O)fn.invoke(i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17);
          }
        };
      }
    };
  }



  public static final <O, I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18> Bijection<Function18<I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, O>, IFn> function18ToIFn() {
    return new AbstractBijection<Function18<I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, O>, IFn>() {
      public final AFn apply(Function18<I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, O> fna) {
        final Function18<I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, O> fn = fna;
        return new AFn() {
          public final Object invoke(Object i1, Object i2, Object i3, Object i4, Object i5, Object i6, Object i7, Object i8, Object i9, Object i10, Object i11, Object i12, Object i13, Object i14, Object i15, Object i16, Object i17, Object i18) {
            return (Object)fn.apply((I1)i1, (I2)i2, (I3)i3, (I4)i4, (I5)i5, (I6)i6, (I7)i7, (I8)i8, (I9)i9, (I10)i10, (I11)i11, (I12)i12, (I13)i13, (I14)i14, (I15)i15, (I16)i16, (I17)i17, (I18)i18);
          }
        };
      }

      public final Function18<I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, O> invert(IFn fna) {
        final IFn fn = fna;
        return new Function18<I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, O>(){
          public final O apply(I1 i1, I2 i2, I3 i3, I4 i4, I5 i5, I6 i6, I7 i7, I8 i8, I9 i9, I10 i10, I11 i11, I12 i12, I13 i13, I14 i14, I15 i15, I16 i16, I17 i17, I18 i18) {
            return (O)fn.invoke(i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18);
          }
        };
      }
    };
  }



  public static final <O, I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, I19> Bijection<Function19<I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, I19, O>, IFn> function19ToIFn() {
    return new AbstractBijection<Function19<I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, I19, O>, IFn>() {
      public final AFn apply(Function19<I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, I19, O> fna) {
        final Function19<I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, I19, O> fn = fna;
        return new AFn() {
          public final Object invoke(Object i1, Object i2, Object i3, Object i4, Object i5, Object i6, Object i7, Object i8, Object i9, Object i10, Object i11, Object i12, Object i13, Object i14, Object i15, Object i16, Object i17, Object i18, Object i19) {
            return (Object)fn.apply((I1)i1, (I2)i2, (I3)i3, (I4)i4, (I5)i5, (I6)i6, (I7)i7, (I8)i8, (I9)i9, (I10)i10, (I11)i11, (I12)i12, (I13)i13, (I14)i14, (I15)i15, (I16)i16, (I17)i17, (I18)i18, (I19)i19);
          }
        };
      }

      public final Function19<I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, I19, O> invert(IFn fna) {
        final IFn fn = fna;
        return new Function19<I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, I19, O>(){
          public final O apply(I1 i1, I2 i2, I3 i3, I4 i4, I5 i5, I6 i6, I7 i7, I8 i8, I9 i9, I10 i10, I11 i11, I12 i12, I13 i13, I14 i14, I15 i15, I16 i16, I17 i17, I18 i18, I19 i19) {
            return (O)fn.invoke(i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19);
          }
        };
      }
    };
  }



  public static final <O, I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, I19, I20> Bijection<Function20<I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, I19, I20, O>, IFn> function20ToIFn() {
    return new AbstractBijection<Function20<I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, I19, I20, O>, IFn>() {
      public final AFn apply(Function20<I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, I19, I20, O> fna) {
        final Function20<I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, I19, I20, O> fn = fna;
        return new AFn() {
          public final Object invoke(Object i1, Object i2, Object i3, Object i4, Object i5, Object i6, Object i7, Object i8, Object i9, Object i10, Object i11, Object i12, Object i13, Object i14, Object i15, Object i16, Object i17, Object i18, Object i19, Object i20) {
            return (Object)fn.apply((I1)i1, (I2)i2, (I3)i3, (I4)i4, (I5)i5, (I6)i6, (I7)i7, (I8)i8, (I9)i9, (I10)i10, (I11)i11, (I12)i12, (I13)i13, (I14)i14, (I15)i15, (I16)i16, (I17)i17, (I18)i18, (I19)i19, (I20)i20);
          }
        };
      }

      public final Function20<I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, I19, I20, O> invert(IFn fna) {
        final IFn fn = fna;
        return new Function20<I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, I19, I20, O>(){
          public final O apply(I1 i1, I2 i2, I3 i3, I4 i4, I5 i5, I6 i6, I7 i7, I8 i8, I9 i9, I10 i10, I11 i11, I12 i12, I13 i13, I14 i14, I15 i15, I16 i16, I17 i17, I18 i18, I19 i19, I20 i20) {
            return (O)fn.invoke(i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20);
          }
        };
      }
    };
  }



  public static final <O, I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, I19, I20, I21> Bijection<Function21<I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, I19, I20, I21, O>, IFn> function21ToIFn() {
    return new AbstractBijection<Function21<I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, I19, I20, I21, O>, IFn>() {
      public final AFn apply(Function21<I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, I19, I20, I21, O> fna) {
        final Function21<I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, I19, I20, I21, O> fn = fna;
        return new AFn() {
          public final Object invoke(Object i1, Object i2, Object i3, Object i4, Object i5, Object i6, Object i7, Object i8, Object i9, Object i10, Object i11, Object i12, Object i13, Object i14, Object i15, Object i16, Object i17, Object i18, Object i19, Object i20, Object i21) {
            return (Object)fn.apply((I1)i1, (I2)i2, (I3)i3, (I4)i4, (I5)i5, (I6)i6, (I7)i7, (I8)i8, (I9)i9, (I10)i10, (I11)i11, (I12)i12, (I13)i13, (I14)i14, (I15)i15, (I16)i16, (I17)i17, (I18)i18, (I19)i19, (I20)i20, (I21)i21);
          }
        };
      }

      public final Function21<I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, I19, I20, I21, O> invert(IFn fna) {
        final IFn fn = fna;
        return new Function21<I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, I19, I20, I21, O>(){
          public final O apply(I1 i1, I2 i2, I3 i3, I4 i4, I5 i5, I6 i6, I7 i7, I8 i8, I9 i9, I10 i10, I11 i11, I12 i12, I13 i13, I14 i14, I15 i15, I16 i16, I17 i17, I18 i18, I19 i19, I20 i20, I21 i21) {
            return (O)fn.invoke(i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, i21);
          }
        };
      }
    };
  }



  public static final <O, I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, I19, I20, I21, I22> Bijection<Function22<I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, I19, I20, I21, I22, O>, IFn> function22ToIFn() {
    return new AbstractBijection<Function22<I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, I19, I20, I21, I22, O>, IFn>() {
      public final AFn apply(Function22<I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, I19, I20, I21, I22, O> fna) {
        final Function22<I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, I19, I20, I21, I22, O> fn = fna;
        return new AFn() {
          public final Object invoke(Object i1, Object i2, Object i3, Object i4, Object i5, Object i6, Object i7, Object i8, Object i9, Object i10, Object i11, Object i12, Object i13, Object i14, Object i15, Object i16, Object i17, Object i18, Object i19, Object i20, Object i21, Object i22) {
            return (Object)fn.apply((I1)i1, (I2)i2, (I3)i3, (I4)i4, (I5)i5, (I6)i6, (I7)i7, (I8)i8, (I9)i9, (I10)i10, (I11)i11, (I12)i12, (I13)i13, (I14)i14, (I15)i15, (I16)i16, (I17)i17, (I18)i18, (I19)i19, (I20)i20, (I21)i21, (I22)i22);
          }
        };
      }

      public final Function22<I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, I19, I20, I21, I22, O> invert(IFn fna) {
        final IFn fn = fna;
        return new Function22<I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, I19, I20, I21, I22, O>(){
          public final O apply(I1 i1, I2 i2, I3 i3, I4 i4, I5 i5, I6 i6, I7 i7, I8 i8, I9 i9, I10 i10, I11 i11, I12 i12, I13 i13, I14 i14, I15 i15, I16 i16, I17 i17, I18 i18, I19 i19, I20 i20, I21 i21, I22 i22) {
            return (O)fn.invoke(i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, i21, i22);
          }
        };
      }
    };
  }


}
